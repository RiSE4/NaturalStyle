package onmitsu.naturalstyle.common;

import cpw.mods.fml.common.IFuelHandler;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.Mod.Metadata;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.network.NetworkRegistry;
import cpw.mods.fml.common.registry.GameRegistry;
import net.minecraft.block.BlockTrapDoor;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.Item.ToolMaterial;
import net.minecraft.item.ItemArmor.ArmorMaterial;
import net.minecraft.item.ItemStack;
import net.minecraft.util.DamageSource;
import net.minecraftforge.common.ChestGenHooks;
import net.minecraftforge.common.util.EnumHelper;
import net.minecraftforge.oredict.OreDictionary;
import onmitsu.naturalstyle.crafting.MonsterRecipe;
import onmitsu.naturalstyle.crafting.Recipes;
import onmitsu.naturalstyle.crafting.TFLogChanger;
import onmitsu.naturalstyle.entity.EntityPlow;
import onmitsu.naturalstyle.entity.EntityWind;
import onmitsu.naturalstyle.event.ArmorEvent;
import onmitsu.naturalstyle.init.ModStacks;
import onmitsu.naturalstyle.init.NAchievements;
import onmitsu.naturalstyle.init.NBlocks;
import onmitsu.naturalstyle.init.NItems;
import onmitsu.naturalstyle.inventory.GuiHandler;
import onmitsu.naturalstyle.util.Helper;
import onmitsu.naturalstyle.util.Lang;
import onmitsu.naturalstyle.world.NaturalGenerator;


@Mod(modid = Reference.MOD_ID, name = Reference.MOD_NAME, version = Reference.MOD_VERSION, useMetadata = true, dependencies = "required-after:BuildCraft|Core" )
public class NaturalStyle {

    @SidedProxy(clientSide = Reference.CLIENT_PROXY_CLASS, serverSide = Reference.COMMON_PROXY_CLASS)
    private static CommonProxy proxy;

    @Metadata
    public static ModMetadata meta;

    @Instance
    public static NaturalStyle instance;

    public static ToolMaterial TOOL_MAPLE_DIAMOND = EnumHelper.addToolMaterial("PICKAXE_MAPLE_DIAMOND", 3, 4000, 10.0F, 7, 22);
    public static final ToolMaterial TOOL_AURORA = Helper.addToolMaterial("ToolAurora", 4, 4800, 9.5F, 5F, 26);
    public static final ArmorMaterial ARMOR_AURORA = Helper.addArmorMaterial("ArmorAurora", 250, new int[] {7, 12, 10, 7}, 26, new ItemStack(NItems.NATURAL_JEWEL, 1, 3));

    public static DamageSource inMincer = new DamageSource("mincer");

    public static final CreativeTabs TAB_NATURALSTYLE = new CreativeTabs("tabNaturalStyle")
    {
        public Item getTabIconItem()
        {
            return NItems.NATURAL_JEWEL;
        }

        public int func_151243_f()
        {
            return 3;
        }
    };

    @EventHandler
    public void PreInit(FMLPreInitializationEvent event)
    {
        info(meta);
        NBlocks.load();
        NItems.load();
        Helper.addWorldGenerator(new NaturalGenerator(), 0);

        Helper.addEntity(EntityWind.class, "entity_na_wind", 0, 80, 3, true);
        Helper.addEntity(EntityPlow.class, "entity_plow", 1, 30, 10, true);
    }

    @EventHandler
    public void Init(FMLInitializationEvent event)
    {
        proxy.registerRenders();
        Helper.addChestGen(ChestGenHooks.VILLAGE_BLACKSMITH, new ItemStack(NItems.CHARM, 1, 0), 5, 1, 1);
        Helper.addForgeEvent(new ArmorEvent());
        NetworkRegistry.INSTANCE.registerGuiHandler(instance, new GuiHandler());

        registerOreDictionary();
        registerFuel();

        Recipes.blockRecipe();
        Recipes.itemRecipe();
    }

    @EventHandler
    public void PostInit(FMLPostInitializationEvent event)
    {
        this.tweakVanilla();
        NAchievements.load();

        ModStacks.loadFromMod();
        Recipes.postRecipe();
        TFLogChanger.load();
        MonsterRecipe.load();
    }

    private static void info(ModMetadata meta)
    {
        meta.modId = Reference.MOD_ID;
        meta.name = Reference.MOD_NAME;
        meta.version = Reference.MOD_VERSION;
        meta.credits = "Made by Onmitsu";
        meta.description = Lang.localize("desc.naturalstyle");
        meta.autogenerated = false;
    }

    private void registerOreDictionary()
    {
        OreDictionary.registerOre("oreEssence", new ItemStack(NBlocks.NATURAL_ORE, 1, 0));
        OreDictionary.registerOre("oreAurora", new ItemStack(NBlocks.NATURAL_ORE, 1, 1));
        OreDictionary.registerOre("gemEssence", new ItemStack(NItems.NATURAL_JEWEL, 1, 0));
        OreDictionary.registerOre("gemAurora", new ItemStack(NItems.NATURAL_JEWEL, 1, 3));
    }

    private void registerFuel()
    {
        GameRegistry.registerFuelHandler(new IFuelHandler()
        {
            @Override
            public int getBurnTime(ItemStack fuel)
            {
                return fuel.equals(new ItemStack(NItems.NATURAL_JEWEL, 1, 3)) ? 8000 : 0;
            }
        });
    }

    private void tweakVanilla()
    {
        Items.iron_door.setMaxStackSize(64);
        Items.wooden_door.setMaxStackSize(64);
        BlockTrapDoor.disableValidation = true;

        Blocks.packed_ice.setHarvestLevel("pickaxe", 0);
        Blocks.ladder.setHarvestLevel("axe", 0);
        Blocks.melon_block.setHarvestLevel("axe", 0);
    }
}
